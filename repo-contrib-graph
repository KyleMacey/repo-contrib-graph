#!/usr/bin/env bash
set_vars() {
  repo=$(echo $repo | sed -E 's/.+github.com.([^/]+\/[^/\.]+)(.git)?/\1/') # Get repos from URLs
  GLOBIGNORE="*"
  ENDPOINT="https://api.github.com/repos/$repo/stats/commit_activity"
  APPNAME="KyleMacey/repo-contrib-graph"
  ACCEPT_HEADER="Accept: application/vnd.github.full+json"
  DAYS[0]='S'
  DAYS[1]='M'
  DAYS[2]='T'
  DAYS[3]='W'
  DAYS[4]='T'
  DAYS[5]='F'
  DAYS[6]='S'
  if [ -n "$disable_color" ]; then
    COUNT_0_COMMITS='-'
    COUNT_1_5_COMMITS='+'
    COUNT_6_10_COMMITS='*'
    COUNT_11_PLUS_COMMITS='■'
  else
    HEAT_1=$'\e[38;5;102m'
    HEAT_2=$'\e[38;5;34m'
    HEAT_3=$'\e[38;5;28m'
    HEAT_4=$'\e[38;5;22m'
    ENDC=$'\e[0m'
    COUNT_0_COMMITS="${HEAT_1}■${ENDC}"
    COUNT_1_5_COMMITS="${HEAT_2}■${ENDC}"
    COUNT_6_10_COMMITS="${HEAT_3}■${ENDC}"
    COUNT_11_PLUS_COMMITS="${HEAT_4}■${ENDC}"
  fi
  set_auth
}

check_dependencies()
{
  for dependency in curl jq; do
    type $dependency >/dev/null 2>&1 || { echo >&2 "You must install \"$dependency\" first. Aborting."; exit 1; }
  done
}

# Set our authorization token if it's provided
set_auth()
{
  if [ -n "$access_token" ]; then
    AUTH_STRING="Authorization: token $access_token"
  fi
}

# Since an uncached hit will kick off a task and return 202, we prime the
# ENDPOINT by hitting it until we get something other than 202
prime_endpoint()
{
  local res=202
  printf "Starting..."
  while [[ $res != 200 ]]; do
    res=$(curl -s -L -I ${AUTH_STRING:+-H "$AUTH_STRING"} -w %{http_code} $ENDPOINT | grep HTTP/2 | awk {'print $2'})
    printf "."
    sleep 1
    if [[ $res != 20? ]]; then
      echo ""
      echo "FATAL: Unable to retrieve repository data."
      echo "Server returned with status $res"
      exit 1
    fi
  done
  echo -e "\n"
}

print_headers()
{
  echo "$repo:"
}

print_key()
{
  # The general key template
  # Substitute in the bounds for the ranges
  # Format as a table
  # `column` struggles with escape codes/colors, so we sub them in after the fact
  printf '   ICON1: 0 commits,ICON2: 1-%s commits\n   ICON3: %s-%s commits,ICON4: %s+ commits\n' \
    $bound2 $(expr $bound2 + 1) $bound3 $(expr $bound3 + 1) \
    | column -ts, \
    | sed -e "s/ICON1/$COUNT_0_COMMITS/" -e "s/ICON2/$COUNT_1_5_COMMITS/" -e "s/ICON3/$COUNT_6_10_COMMITS/" -e "s/ICON4/$COUNT_11_PLUS_COMMITS/"
}

print_stats()
{
  echo
  echo "Total contributions in the past year: $total commits"
  echo "Average contribution per day: $(expr $total / 365) commits"
  echo "Most contribution in a single day: $max commits"
  echo "Longest streak: $longest_streak days"
}

# Get our data from the API and massage it into a beautiful graph!
fetch_and_print()
{
  response_data=$(curl -s -L -G \
    -H "User-Agent: $APPNAME" \
    -H "$ACCEPT_HEADER" \
    ${AUTH_STRING:+-H "$AUTH_STRING"} \
    $ENDPOINT)

  if [ -n "$DEBUG" ]; then
    echo -e $response_data
    exit
  fi

  # Calculate the max number of contributions in any given day
  max=0;
  longest_streak=0;
  this_streak=0;
  total=0
  for dx in $(seq 0 6); do
    for wx in $(seq 0 51); do
      local day=$(echo $response_data | jq ".[$wx] | .days | .[$dx]")

      if [ "$day" -gt 0 ]; then
        total=$(expr $total + $day)
        this_streak=$(expr $this_streak + 1)
        if [ "$this_streak" -gt "$longest_streak" ]; then
          longest_streak=$this_streak
        fi
      else
        this_streak=0;
      fi
      if [ "$day" -gt "$max" ]; then
        max=$day;
      fi
    done
  done

  local segment=$(expr $max / 3)
  bound1=0;
  bound2=$(expr $segment);
  bound3=$(expr $segment * 2);

  for d in $(seq 0 6); do
    printf "${DAYS[$d]} |"
    for w in $(seq 0 51); do
      local day=$(echo $response_data | jq ".[$w] | .days | .[$d]")
      local indicator=$COUNT_0_COMMITS

      if [ "$day" -gt $bound1 -a "$day" -le $bound2 ]; then indicator=$COUNT_1_5_COMMITS;
      elif [ "$day" -gt $bound2 -a "$day" -le $bound3 ]; then indicator=$COUNT_6_10_COMMITS;
      elif [ "$day" -gt $bound3 ]; then indicator=$COUNT_11_PLUS_COMMITS;
      fi

      printf '%s ' $indicator
    done
    echo ""
  done
}

# Do all the things!
generate_graph()
{
  set_vars
  check_dependencies
  prime_endpoint
  print_headers
  fetch_and_print
  print_key
  print_stats
}

usage() {
  echo "\
  usage: repo-contrib-graph [options] repo
          -t) access_token: Your personal GitHub access token
          -p) plain: don't display with color escape sequences
          -h) usage: Display this help
          -d) debug: Dumps the JSON response and exits
          repo: The repository you want to generate a contribution graph for
              format: username/repository
  "
}

while getopts r:t:cphd option; do
  case "${option}" in
  t)  access_token=${OPTARG};;
  c)  echo "using color is the default now!";;
  p)  disable_color=true;;
  h)  usage
      exit;;
  d)  DEBUG=true
  esac
done
shift $((OPTIND-1))
repo=$1

if [ -z "$repo" ]; then
    usage
    exit
fi

generate_graph
